// Code generated by protoc-gen-go.
// source: agent.proto
// DO NOT EDIT!

/*
Package mediaagent is a generated protocol buffer package.

It is generated from these files:
	agent.proto

It has these top-level messages:
	ScanReq
	ScanRsp
	Item
	ExistsReq
	ExistsRsp
*/
package mediaagent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScanReq struct {
	Folders []string `protobuf:"bytes,1,rep,name=folders" json:"folders,omitempty"`
	Mask    string   `protobuf:"bytes,2,opt,name=mask" json:"mask,omitempty"`
}

func (m *ScanReq) Reset()                    { *m = ScanReq{} }
func (m *ScanReq) String() string            { return proto.CompactTextString(m) }
func (*ScanReq) ProtoMessage()               {}
func (*ScanReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScanRsp struct {
	Filenames []string `protobuf:"bytes,1,rep,name=filenames" json:"filenames,omitempty"`
}

func (m *ScanRsp) Reset()                    { *m = ScanRsp{} }
func (m *ScanRsp) String() string            { return proto.CompactTextString(m) }
func (*ScanRsp) ProtoMessage()               {}
func (*ScanRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Item struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ExistsReq struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ExistsReq) Reset()                    { *m = ExistsReq{} }
func (m *ExistsReq) String() string            { return proto.CompactTextString(m) }
func (*ExistsReq) ProtoMessage()               {}
func (*ExistsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExistsReq) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ExistsRsp struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ExistsRsp) Reset()                    { *m = ExistsRsp{} }
func (m *ExistsRsp) String() string            { return proto.CompactTextString(m) }
func (*ExistsRsp) ProtoMessage()               {}
func (*ExistsRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExistsRsp) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ScanReq)(nil), "mediaagent.ScanReq")
	proto.RegisterType((*ScanRsp)(nil), "mediaagent.ScanRsp")
	proto.RegisterType((*Item)(nil), "mediaagent.Item")
	proto.RegisterType((*ExistsReq)(nil), "mediaagent.ExistsReq")
	proto.RegisterType((*ExistsRsp)(nil), "mediaagent.ExistsRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MediaAgent service

type MediaAgentClient interface {
	Scan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRsp, error)
	Exists(ctx context.Context, in *ExistsReq, opts ...grpc.CallOption) (*ExistsRsp, error)
}

type mediaAgentClient struct {
	cc *grpc.ClientConn
}

func NewMediaAgentClient(cc *grpc.ClientConn) MediaAgentClient {
	return &mediaAgentClient{cc}
}

func (c *mediaAgentClient) Scan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRsp, error) {
	out := new(ScanRsp)
	err := grpc.Invoke(ctx, "/mediaagent.MediaAgent/Scan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAgentClient) Exists(ctx context.Context, in *ExistsReq, opts ...grpc.CallOption) (*ExistsRsp, error) {
	out := new(ExistsRsp)
	err := grpc.Invoke(ctx, "/mediaagent.MediaAgent/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MediaAgent service

type MediaAgentServer interface {
	Scan(context.Context, *ScanReq) (*ScanRsp, error)
	Exists(context.Context, *ExistsReq) (*ExistsRsp, error)
}

func RegisterMediaAgentServer(s *grpc.Server, srv MediaAgentServer) {
	s.RegisterService(&_MediaAgent_serviceDesc, srv)
}

func _MediaAgent_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAgentServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediaagent.MediaAgent/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAgentServer).Scan(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAgent_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAgentServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediaagent.MediaAgent/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAgentServer).Exists(ctx, req.(*ExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediaagent.MediaAgent",
	HandlerType: (*MediaAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _MediaAgent_Scan_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _MediaAgent_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x49, 0x9a, 0xb6, 0xe4, 0x2a, 0x21, 0x74, 0x80, 0x64, 0x45, 0x0c, 0x91, 0x07, 0xc8,
	0x94, 0x21, 0x1d, 0x60, 0x65, 0x40, 0x82, 0x81, 0xc5, 0xfc, 0x02, 0xd3, 0x5c, 0x91, 0x45, 0x1c,
	0x87, 0xfa, 0x06, 0xc4, 0xaf, 0x47, 0x4e, 0xd2, 0x36, 0x12, 0x0c, 0x6c, 0xbe, 0xf7, 0xee, 0xf3,
	0xbb, 0xb3, 0x61, 0xa5, 0xdf, 0xa9, 0xe5, 0xb2, 0xdb, 0x39, 0x76, 0x08, 0x96, 0x6a, 0xa3, 0x7b,
	0x45, 0xde, 0xc1, 0xf2, 0x75, 0xa3, 0x5b, 0x45, 0x9f, 0x28, 0x60, 0xb9, 0x75, 0x4d, 0x4d, 0x3b,
	0x2f, 0xa2, 0x7c, 0x56, 0xa4, 0x6a, 0x5f, 0x22, 0x42, 0x62, 0xb5, 0xff, 0x10, 0x71, 0x1e, 0x15,
	0xa9, 0xea, 0xcf, 0xf2, 0x76, 0x04, 0x7d, 0x87, 0xd7, 0x90, 0x6e, 0x4d, 0x43, 0xad, 0xb6, 0xb4,
	0x47, 0x8f, 0x82, 0x7c, 0x82, 0xe4, 0x99, 0xc9, 0xe2, 0x19, 0xc4, 0xa6, 0x16, 0x51, 0x1e, 0x15,
	0x89, 0x8a, 0x4d, 0x8d, 0x19, 0x9c, 0x36, 0x6e, 0xa3, 0xd9, 0xb8, 0x76, 0xbc, 0xf8, 0x50, 0xe3,
	0x25, 0xcc, 0xd9, 0x70, 0x43, 0x62, 0xd6, 0x1b, 0x43, 0x21, 0xd7, 0x90, 0x3e, 0x7e, 0x19, 0xcf,
	0x3e, 0x4c, 0x7b, 0x03, 0x73, 0xc3, 0x64, 0x87, 0xc0, 0x55, 0x75, 0x5e, 0x1e, 0x97, 0x2a, 0x43,
	0x9e, 0x1a, 0xec, 0x09, 0xe4, 0xbb, 0xff, 0x42, 0xd5, 0x37, 0xc0, 0x4b, 0x70, 0x1e, 0x82, 0x83,
	0x15, 0x24, 0x61, 0x55, 0xbc, 0x98, 0xb6, 0x8f, 0xaf, 0x96, 0xfd, 0x16, 0x7d, 0x27, 0x4f, 0xf0,
	0x1e, 0x16, 0x43, 0x2c, 0x5e, 0x4d, 0x1b, 0x0e, 0xf3, 0x67, 0x7f, 0xc9, 0x81, 0x7c, 0x5b, 0xf4,
	0x9f, 0xb4, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x03, 0xf0, 0xcc, 0x00, 0xb3, 0x01, 0x00, 0x00,
}
