#!/usr/bin/env bash

# exit on error
set -e
# exit on unbound variable in scope
set -u

SEMVER_REGEX="^[0-9]*\.[0-9]*\.[0-9]*(-[0-9A-Za-z-]*)?(+[0-9A-Za-z-]*)?$"
SEMVER_REGEX_BASH="^([0-9]*)\.([0-9]*)\.([0-9]*)(\-[0-9A-Za-z-]+)?(\+[0-9A-Za-z-]+)?$"

PROG="semver"
PROG_VERSION=0.4.2

VERSION_FILE=VERSION
CHANGES_FILE=CHANGES
DEFAULT_VERSION=0.1.0

USAGE="\
Usage:
  $PROG
  $PROG init [<version>]
  $PROG bump [(major|minor|patch|prerel <prerel>|meta <meta>) | --force <version>] [--pretend]
  $PROG compare <version> [<oldversion>]
  $PROG --help
  $PROG --version

Arguments:
  <version>  A version must match the following regex pattern:
             \"${SEMVER_REGEX}\".
             In english, the version must match X.Y.Z(-PRERELEASE)(+METADATA)
             where X, Y and Z are positive integers, PRERELEASE is an optionnal
             string composed of alphanumeric characters and hyphens and
             METADATA is also an optional string composed of alphanumeric
             characters and hyphens.

  <oldversion>  See <version> definition.

  <prerel>  String that must be composed of alphanumeric characters and hyphens.

  <meta>  String that must be composed of alphanumeric characters and hyphens.

Options:
  -f, --force=<version>  Forces a bump of any version without checking if it
                         respects semver bumping rules.
  -p, --pretend          Do not overwrite the project's version file, only
                         output what the new version string would be.
  -v, --version          Print the version of this tool.
  -h, --help             Print this help message.

Commands:
  init     initialize this project's version.
  bump     this project's version by one of major, minor, patch, prerel, meta
           or a forced potentialy conflicting version.
  compare  <version> to this project's version or to provided <oldversion>."


function warning {
  echo -e "$1" >&2
}

function error {
  echo -e "$1" >&2
  exit 1
}

function usage-help {
  error "$USAGE"
}

function usage-version {
  echo -e "${PROG}: $PROG_VERSION"
  exit 0
}

function validate-version {
  VERSION=$1
  if [[ "$VERSION" =~ $SEMVER_REGEX_BASH ]]; then
    if [ "$#" -eq "2" ]; then
      MAJOR=${BASH_REMATCH[1]}
      MINOR=${BASH_REMATCH[2]}
      PATCH=${BASH_REMATCH[3]}
      PRERE=${BASH_REMATCH[4]}
      META=${BASH_REMATCH[5]}
      echo "$2=(\"$MAJOR\" \"$MINOR\" \"$PATCH\" \"$PRERE\" \"$META\")"
    else
      echo "$VERSION"
    fi
  else
    error "version $VERSION does not match the semver scheme 'X.Y.Z(-PRERELEASE)(+METADATA)'. See help for more information."
  fi
}

function get-version {
  while [ -w . ]; do
    if [ -e $VERSION_FILE ]; then
      validate-version "$(cat $VERSION_FILE)"
      return 0
    fi

    pushd .. > /dev/null
  done

  error "Version file $VERSION_FILE not found, you may want to initialize this project with 'version init'"
}

function compare-version {
  eval $(validate-version "$1" V)
  eval $(validate-version "$2" V_)

  # MAJOR, MINOR and PATCH should compare numericaly
  for i in 0 1 2; do
    case $((${V[$i]} - ${V_[$i]})) in
      0) ;;
      -[0-9]*) echo -1; return 0;;
      [0-9]*) echo 1; return 0 ;;
    esac
  done

  # PREREL should compare with the ascii order.
  if [[ "${V[3]}" > "${V_[3]}" ]]; then
    echo 1; return 0;
  elif [[ "${V[3]}" < "${V_[3]}" ]]; then
    echo -1; return 0;
  fi

  echo 0
}

function cli-print {
  get-version
  exit 0
}

function release {
  CURRENT=$1
  VERSION=$2

  git flow release start $VERSION

  echo $VERSION | tee $VERSION_FILE

  if [[ $CURRENT == "default" ]]; then
    echo "Version $VERSION - `date +%F`" > $CHANGES_FILE
    git --no-pager log --reverse --pretty=raw | egrep -v '^[[:space:]]*$' | egrep -v '^[commit|tree|author|parent]' | egrep -v '.*Merge' >> $CHANGES_FILE
    echo "" >> $CHANGES_FILE
    echo "" >> $CHANGES_FILE    
  else
    echo "Version $VERSION - `date +%F`" > tmpfile
    git --no-pager log --reverse --pretty=raw "$CURRENT"...HEAD | egrep -v '^[[:space:]]*$' | egrep -v '^[commit|tree|author|parent]' | egrep -v '.*Merge' >> tmpfile
    echo "" >> tmpfile
    echo "" >> tmpfile
    cat $CHANGES_FILE >> tmpfile
    mv tmpfile $CHANGES_FILE
  fi

  git add $CHANGES_FILE $VERSION_FILE
  git commit -m "Version bump to $VERSION"  

  git flow release finish -m "$VERSION" $VERSION

}

function command-init {
  case $# in
    0) VERSION="$DEFAULT_VERSION" ;;
    1) VERSION=$(validate-version "$1") ;;
    2) usage-help;;
  esac

  if [ -e "$VERSION_FILE" ]; then
    error "version file $VERSION_FILE exists, cannot initialize project.  Either remove the current file or use 'version bump --force <newversion>'."
  fi

  echo "$VERSION" | tee "$VERSION_FILE"
}

function command-bump {
  branch_name=$(git symbolic-ref -q HEAD)
  branch_name=${branch_name##refs/heads/}
  branch_name=${branch_name:-HEAD}

  echo $branch_name

  if [[ $branch_name != "develop" ]]; then
    error "can bump only from develop branch. Merge your current feature branch and try again."
  fi

  if ! git diff --quiet; then
    error "there are unsaved changes. please commit changes and finish your feature branch first."
  fi

  PRETEND=0
  VERSION=""
  NEW=""

  if [[ ! -f $VERSION_FILE ]]; then
    command-init
    NEW=$(get-version)
    VERSION="default"
  else
    VERSION=$(get-version)
    eval $(validate-version $VERSION split)
    MAJOR=${split[0]}
    MINOR=${split[1]}
    PATCH=${split[2]}
    PRERE=${split[3]}
    META=${split[4]}
    while [[ $# -gt 0 ]]; do
      case "$1" in
        major) NEW="$(($MAJOR + 1)).0.0"; shift ;;
        minor) NEW="${MAJOR}.$(($MINOR + 1)).0"; shift ;;
        patch) NEW="${MAJOR}.${MINOR}.$(($PATCH+ 1))"; shift ;;
        prerel)
          if [[ $# -lt 2 ]]; then
            usage-help
          else
            NEW=$(validate-version "${MAJOR}.${MINOR}.${PATCH}-${2}")
            shift 2
          fi ;;
        meta)
          if [[ $# -lt 2 ]]; then
            usage-help
          else
            NEW=$(validate-version "${MAJOR}.${MINOR}.${PATCH}${PRERE}+${2}")
            shift 2
          fi ;;
        --force|-f)
          if [[ $# -lt 2 ]]; then
            usage-help
          else
            NEW=$(validate-version "$2")
            shift 2
          fi ;;
        --pretend|-p) PRETEND=1; shift ;;
        "") break;;
        *) usage-help ;;
      esac
    done
  fi

  if [[ "$PRETEND" -eq 1 ]]; then
    echo $NEW
  else
    release $VERSION $NEW
  fi
  exit 0
}

function command-compare {
  VERSION=$(get-version)

  case $# in
    0) usage-help ;;
    1) V=$(validate-version "$1"); V_=$VERSION ;;
    2) V=$(validate-version "$1"); V_=$(validate-version "$2") ;;
  esac

  COMP=$(compare-version "$V" "$V_")
  echo "$COMP"
  exit 0
}

case $# in
  0) cli-print ;;
esac

case $1 in
  --help|-h) echo -e "$USAGE"; exit 0;;
  --version|-v) usage-version ;;
  init) shift; command-init $@;;
  bump) shift; command-bump $@;;
  compare) shift; command-compare $@;;
  *) echo "Unknown arguments: $@"; usage-help;;
esac
