// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: mediaagent/agent.proto

package mediaagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaAgentClient is the client API for MediaAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaAgentClient interface {
	Scan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRsp, error)
	Exists(ctx context.Context, in *ExistsReq, opts ...grpc.CallOption) (*ExistsRsp, error)
}

type mediaAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaAgentClient(cc grpc.ClientConnInterface) MediaAgentClient {
	return &mediaAgentClient{cc}
}

func (c *mediaAgentClient) Scan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRsp, error) {
	out := new(ScanRsp)
	err := c.cc.Invoke(ctx, "/mediaagent.MediaAgent/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAgentClient) Exists(ctx context.Context, in *ExistsReq, opts ...grpc.CallOption) (*ExistsRsp, error) {
	out := new(ExistsRsp)
	err := c.cc.Invoke(ctx, "/mediaagent.MediaAgent/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaAgentServer is the server API for MediaAgent service.
// All implementations must embed UnimplementedMediaAgentServer
// for forward compatibility
type MediaAgentServer interface {
	Scan(context.Context, *ScanReq) (*ScanRsp, error)
	Exists(context.Context, *ExistsReq) (*ExistsRsp, error)
	mustEmbedUnimplementedMediaAgentServer()
}

// UnimplementedMediaAgentServer must be embedded to have forward compatible implementations.
type UnimplementedMediaAgentServer struct {
}

func (UnimplementedMediaAgentServer) Scan(context.Context, *ScanReq) (*ScanRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedMediaAgentServer) Exists(context.Context, *ExistsReq) (*ExistsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedMediaAgentServer) mustEmbedUnimplementedMediaAgentServer() {}

// UnsafeMediaAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaAgentServer will
// result in compilation errors.
type UnsafeMediaAgentServer interface {
	mustEmbedUnimplementedMediaAgentServer()
}

func RegisterMediaAgentServer(s grpc.ServiceRegistrar, srv MediaAgentServer) {
	s.RegisterService(&MediaAgent_ServiceDesc, srv)
}

func _MediaAgent_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAgentServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediaagent.MediaAgent/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAgentServer).Scan(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAgent_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAgentServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediaagent.MediaAgent/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAgentServer).Exists(ctx, req.(*ExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaAgent_ServiceDesc is the grpc.ServiceDesc for MediaAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaagent.MediaAgent",
	HandlerType: (*MediaAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _MediaAgent_Scan_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _MediaAgent_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediaagent/agent.proto",
}
